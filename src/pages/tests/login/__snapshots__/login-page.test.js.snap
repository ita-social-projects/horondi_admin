// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login page Should exist 1`] = `
<LoginPage>
  <div
    className="makeStyles-container-4"
  >
    <form
      className="makeStyles-login-1"
      onSubmit={[MockFunction]}
    >
      <WithStyles(ForwardRef(Avatar))
        className="makeStyles-avatar-2"
      >
        <ForwardRef(Avatar)
          className="makeStyles-avatar-2"
          classes={
            Object {
              "circle": "MuiAvatar-circle",
              "circular": "MuiAvatar-circular",
              "colorDefault": "MuiAvatar-colorDefault",
              "fallback": "MuiAvatar-fallback",
              "img": "MuiAvatar-img",
              "root": "MuiAvatar-root",
              "rounded": "MuiAvatar-rounded",
              "square": "MuiAvatar-square",
            }
          }
        >
          <div
            className="MuiAvatar-root MuiAvatar-circle makeStyles-avatar-2 MuiAvatar-colorDefault"
          >
            <ForwardRef(LockOutlinedIcon)>
              <WithStyles(ForwardRef(SvgIcon))>
                <ForwardRef(SvgIcon)
                  classes={
                    Object {
                      "colorAction": "MuiSvgIcon-colorAction",
                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                      "colorError": "MuiSvgIcon-colorError",
                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                      "root": "MuiSvgIcon-root",
                    }
                  }
                >
                  <svg
                    aria-hidden={true}
                    className="MuiSvgIcon-root"
                    focusable="false"
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6zm9 14H6V10h12v10zm-6-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"
                    />
                  </svg>
                </ForwardRef(SvgIcon)>
              </WithStyles(ForwardRef(SvgIcon))>
            </ForwardRef(LockOutlinedIcon)>
          </div>
        </ForwardRef(Avatar)>
      </WithStyles(ForwardRef(Avatar))>
      <WithStyles(ForwardRef(Typography))
        component="h1"
        variant="h5"
      >
        <ForwardRef(Typography)
          classes={
            Object {
              "alignCenter": "MuiTypography-alignCenter",
              "alignJustify": "MuiTypography-alignJustify",
              "alignLeft": "MuiTypography-alignLeft",
              "alignRight": "MuiTypography-alignRight",
              "body1": "MuiTypography-body1",
              "body2": "MuiTypography-body2",
              "button": "MuiTypography-button",
              "caption": "MuiTypography-caption",
              "colorError": "MuiTypography-colorError",
              "colorInherit": "MuiTypography-colorInherit",
              "colorPrimary": "MuiTypography-colorPrimary",
              "colorSecondary": "MuiTypography-colorSecondary",
              "colorTextPrimary": "MuiTypography-colorTextPrimary",
              "colorTextSecondary": "MuiTypography-colorTextSecondary",
              "displayBlock": "MuiTypography-displayBlock",
              "displayInline": "MuiTypography-displayInline",
              "gutterBottom": "MuiTypography-gutterBottom",
              "h1": "MuiTypography-h1",
              "h2": "MuiTypography-h2",
              "h3": "MuiTypography-h3",
              "h4": "MuiTypography-h4",
              "h5": "MuiTypography-h5",
              "h6": "MuiTypography-h6",
              "noWrap": "MuiTypography-noWrap",
              "overline": "MuiTypography-overline",
              "paragraph": "MuiTypography-paragraph",
              "root": "MuiTypography-root",
              "srOnly": "MuiTypography-srOnly",
              "subtitle1": "MuiTypography-subtitle1",
              "subtitle2": "MuiTypography-subtitle2",
            }
          }
          component="h1"
          variant="h5"
        >
          <h1
            className="MuiTypography-root MuiTypography-h5"
          >
            Увійти
          </h1>
        </ForwardRef(Typography)>
      </WithStyles(ForwardRef(Typography))>
      <WithStyles(ForwardRef(TextField))
        autoFocus={true}
        className="makeStyles-input-5"
        data-cy="email"
        fullWidth={true}
        id="email"
        label="Email"
        margin="normal"
        name="email"
        onBlur={[MockFunction]}
        onChange={[MockFunction]}
        type="text"
        variant="outlined"
      >
        <ForwardRef(TextField)
          autoFocus={true}
          className="makeStyles-input-5"
          classes={
            Object {
              "root": "MuiTextField-root",
            }
          }
          data-cy="email"
          fullWidth={true}
          id="email"
          label="Email"
          margin="normal"
          name="email"
          onBlur={[MockFunction]}
          onChange={[MockFunction]}
          type="text"
          variant="outlined"
        >
          <WithStyles(ForwardRef(FormControl))
            className="MuiTextField-root makeStyles-input-5"
            color="primary"
            data-cy="email"
            disabled={false}
            error={false}
            fullWidth={true}
            margin="normal"
            required={false}
            variant="outlined"
          >
            <ForwardRef(FormControl)
              className="MuiTextField-root makeStyles-input-5"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              color="primary"
              data-cy="email"
              disabled={false}
              error={false}
              fullWidth={true}
              margin="normal"
              required={false}
              variant="outlined"
            >
              <div
                className="MuiFormControl-root MuiTextField-root makeStyles-input-5 MuiFormControl-marginNormal MuiFormControl-fullWidth"
                data-cy="email"
              >
                <WithStyles(ForwardRef(InputLabel))
                  htmlFor="email"
                  id="email-label"
                >
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                    htmlFor="email"
                    id="email-label"
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={false}
                      htmlFor="email"
                      id="email-label"
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "colorSecondary": "MuiFormLabel-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={false}
                        htmlFor="email"
                        id="email-label"
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                          data-shrink={false}
                          htmlFor="email"
                          id="email-label"
                        >
                          Email
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(OutlinedInput))
                  autoFocus={true}
                  fullWidth={true}
                  id="email"
                  label={
                    <React.Fragment>
                      Email
                    </React.Fragment>
                  }
                  multiline={false}
                  name="email"
                  onBlur={[MockFunction]}
                  onChange={[MockFunction]}
                  type="text"
                >
                  <ForwardRef(OutlinedInput)
                    autoFocus={true}
                    classes={
                      Object {
                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                        "adornedStart": "MuiOutlinedInput-adornedStart",
                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "input": "MuiOutlinedInput-input",
                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                        "marginDense": "MuiOutlinedInput-marginDense",
                        "multiline": "MuiOutlinedInput-multiline",
                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                        "root": "MuiOutlinedInput-root",
                      }
                    }
                    fullWidth={true}
                    id="email"
                    label={
                      <React.Fragment>
                        Email
                      </React.Fragment>
                    }
                    multiline={false}
                    name="email"
                    onBlur={[MockFunction]}
                    onChange={[MockFunction]}
                    type="text"
                  >
                    <WithStyles(ForwardRef(InputBase))
                      autoFocus={true}
                      classes={
                        Object {
                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                          "adornedStart": "MuiOutlinedInput-adornedStart",
                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "input": "MuiOutlinedInput-input",
                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                          "marginDense": "MuiOutlinedInput-marginDense",
                          "multiline": "MuiOutlinedInput-multiline",
                          "notchedOutline": null,
                          "root": "MuiOutlinedInput-root",
                        }
                      }
                      fullWidth={true}
                      id="email"
                      inputComponent="input"
                      multiline={false}
                      name="email"
                      onBlur={[MockFunction]}
                      onChange={[MockFunction]}
                      renderSuffix={[Function]}
                      type="text"
                    >
                      <ForwardRef(InputBase)
                        autoFocus={true}
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl",
                            "fullWidth": "MuiInputBase-fullWidth",
                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                          }
                        }
                        fullWidth={true}
                        id="email"
                        inputComponent="input"
                        multiline={false}
                        name="email"
                        onBlur={[MockFunction]}
                        onChange={[MockFunction]}
                        renderSuffix={[Function]}
                        type="text"
                      >
                        <div
                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            autoFocus={true}
                            className="MuiInputBase-input MuiOutlinedInput-input"
                            disabled={false}
                            id="email"
                            name="email"
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            type="text"
                          />
                          <WithStyles(ForwardRef(NotchedOutline))
                            className="MuiOutlinedInput-notchedOutline"
                            label={
                              <React.Fragment>
                                Email
                              </React.Fragment>
                            }
                            labelWidth={0}
                            notched={false}
                          >
                            <ForwardRef(NotchedOutline)
                              className="MuiOutlinedInput-notchedOutline"
                              classes={
                                Object {
                                  "legend": "PrivateNotchedOutline-legend-8",
                                  "legendLabelled": "PrivateNotchedOutline-legendLabelled-9",
                                  "legendNotched": "PrivateNotchedOutline-legendNotched-10",
                                  "root": "PrivateNotchedOutline-root-7",
                                }
                              }
                              label={
                                <React.Fragment>
                                  Email
                                </React.Fragment>
                              }
                              labelWidth={0}
                              notched={false}
                            >
                              <fieldset
                                aria-hidden={true}
                                className="PrivateNotchedOutline-root-7 MuiOutlinedInput-notchedOutline"
                              >
                                <legend
                                  className="PrivateNotchedOutline-legendLabelled-9"
                                >
                                  <span>
                                    Email
                                  </span>
                                </legend>
                              </fieldset>
                            </ForwardRef(NotchedOutline)>
                          </WithStyles(ForwardRef(NotchedOutline))>
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(OutlinedInput)>
                </WithStyles(ForwardRef(OutlinedInput))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </ForwardRef(TextField)>
      </WithStyles(ForwardRef(TextField))>
      <WithStyles(ForwardRef(FormControl))
        className="makeStyles-input-5"
        variant="outlined"
      >
        <ForwardRef(FormControl)
          className="makeStyles-input-5"
          classes={
            Object {
              "fullWidth": "MuiFormControl-fullWidth",
              "marginDense": "MuiFormControl-marginDense",
              "marginNormal": "MuiFormControl-marginNormal",
              "root": "MuiFormControl-root",
            }
          }
          variant="outlined"
        >
          <div
            className="MuiFormControl-root makeStyles-input-5"
          >
            <WithStyles(ForwardRef(InputLabel))
              htmlFor="outlined-adornment-password"
            >
              <ForwardRef(InputLabel)
                classes={
                  Object {
                    "animated": "MuiInputLabel-animated",
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "filled": "MuiInputLabel-filled",
                    "focused": "Mui-focused",
                    "formControl": "MuiInputLabel-formControl",
                    "marginDense": "MuiInputLabel-marginDense",
                    "outlined": "MuiInputLabel-outlined",
                    "required": "Mui-required",
                    "root": "MuiInputLabel-root",
                    "shrink": "MuiInputLabel-shrink",
                  }
                }
                htmlFor="outlined-adornment-password"
              >
                <WithStyles(ForwardRef(FormLabel))
                  className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                  classes={
                    Object {
                      "asterisk": "MuiInputLabel-asterisk",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "required": "Mui-required",
                    }
                  }
                  data-shrink={false}
                  htmlFor="outlined-adornment-password"
                >
                  <ForwardRef(FormLabel)
                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                    classes={
                      Object {
                        "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                        "colorSecondary": "MuiFormLabel-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "filled": "MuiFormLabel-filled",
                        "focused": "Mui-focused Mui-focused",
                        "required": "Mui-required Mui-required",
                        "root": "MuiFormLabel-root",
                      }
                    }
                    data-shrink={false}
                    htmlFor="outlined-adornment-password"
                  >
                    <label
                      className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                      data-shrink={false}
                      htmlFor="outlined-adornment-password"
                    >
                      Password
                    </label>
                  </ForwardRef(FormLabel)>
                </WithStyles(ForwardRef(FormLabel))>
              </ForwardRef(InputLabel)>
            </WithStyles(ForwardRef(InputLabel))>
            <WithStyles(ForwardRef(OutlinedInput))
              data-cy="password"
              endAdornment={
                <ForwardRef(WithStyles)
                  position="end"
                >
                  <ForwardRef(WithStyles)
                    aria-label="toggle password visibility"
                    edge="end"
                    onClick={[Function]}
                  >
                    <UNDEFINED />
                  </ForwardRef(WithStyles)>
                </ForwardRef(WithStyles)>
              }
              id="outlined-adornment-password"
              labelWidth={70}
              name="password"
              onBlur={[MockFunction]}
              onChange={[MockFunction]}
              type="password"
            >
              <ForwardRef(OutlinedInput)
                classes={
                  Object {
                    "adornedEnd": "MuiOutlinedInput-adornedEnd",
                    "adornedStart": "MuiOutlinedInput-adornedStart",
                    "colorSecondary": "MuiOutlinedInput-colorSecondary",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "focused": "Mui-focused",
                    "input": "MuiOutlinedInput-input",
                    "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                    "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                    "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                    "inputMultiline": "MuiOutlinedInput-inputMultiline",
                    "marginDense": "MuiOutlinedInput-marginDense",
                    "multiline": "MuiOutlinedInput-multiline",
                    "notchedOutline": "MuiOutlinedInput-notchedOutline",
                    "root": "MuiOutlinedInput-root",
                  }
                }
                data-cy="password"
                endAdornment={
                  <ForwardRef(WithStyles)
                    position="end"
                  >
                    <ForwardRef(WithStyles)
                      aria-label="toggle password visibility"
                      edge="end"
                      onClick={[Function]}
                    >
                      <UNDEFINED />
                    </ForwardRef(WithStyles)>
                  </ForwardRef(WithStyles)>
                }
                id="outlined-adornment-password"
                labelWidth={70}
                name="password"
                onBlur={[MockFunction]}
                onChange={[MockFunction]}
                type="password"
              >
                <WithStyles(ForwardRef(InputBase))
                  classes={
                    Object {
                      "adornedEnd": "MuiOutlinedInput-adornedEnd",
                      "adornedStart": "MuiOutlinedInput-adornedStart",
                      "colorSecondary": "MuiOutlinedInput-colorSecondary",
                      "disabled": "Mui-disabled",
                      "error": "Mui-error",
                      "focused": "Mui-focused",
                      "input": "MuiOutlinedInput-input",
                      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                      "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                      "inputMultiline": "MuiOutlinedInput-inputMultiline",
                      "marginDense": "MuiOutlinedInput-marginDense",
                      "multiline": "MuiOutlinedInput-multiline",
                      "notchedOutline": null,
                      "root": "MuiOutlinedInput-root",
                    }
                  }
                  data-cy="password"
                  endAdornment={
                    <ForwardRef(WithStyles)
                      position="end"
                    >
                      <ForwardRef(WithStyles)
                        aria-label="toggle password visibility"
                        edge="end"
                        onClick={[Function]}
                      >
                        <UNDEFINED />
                      </ForwardRef(WithStyles)>
                    </ForwardRef(WithStyles)>
                  }
                  fullWidth={false}
                  id="outlined-adornment-password"
                  inputComponent="input"
                  multiline={false}
                  name="password"
                  onBlur={[MockFunction]}
                  onChange={[MockFunction]}
                  renderSuffix={[Function]}
                  type="password"
                >
                  <ForwardRef(InputBase)
                    classes={
                      Object {
                        "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                        "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                        "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                        "disabled": "Mui-disabled Mui-disabled",
                        "error": "Mui-error Mui-error",
                        "focused": "Mui-focused Mui-focused",
                        "formControl": "MuiInputBase-formControl",
                        "fullWidth": "MuiInputBase-fullWidth",
                        "input": "MuiInputBase-input MuiOutlinedInput-input",
                        "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                        "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                        "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                        "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                        "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                        "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                        "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                        "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                        "root": "MuiInputBase-root MuiOutlinedInput-root",
                      }
                    }
                    data-cy="password"
                    endAdornment={
                      <ForwardRef(WithStyles)
                        position="end"
                      >
                        <ForwardRef(WithStyles)
                          aria-label="toggle password visibility"
                          edge="end"
                          onClick={[Function]}
                        >
                          <UNDEFINED />
                        </ForwardRef(WithStyles)>
                      </ForwardRef(WithStyles)>
                    }
                    fullWidth={false}
                    id="outlined-adornment-password"
                    inputComponent="input"
                    multiline={false}
                    name="password"
                    onBlur={[MockFunction]}
                    onChange={[MockFunction]}
                    renderSuffix={[Function]}
                    type="password"
                  >
                    <div
                      className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                      data-cy="password"
                      onClick={[Function]}
                    >
                      <input
                        aria-invalid={false}
                        className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                        disabled={false}
                        id="outlined-adornment-password"
                        name="password"
                        onAnimationStart={[Function]}
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={false}
                        type="password"
                      />
                      <WithStyles(ForwardRef(InputAdornment))
                        position="end"
                      >
                        <ForwardRef(InputAdornment)
                          classes={
                            Object {
                              "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                              "filled": "MuiInputAdornment-filled",
                              "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                              "marginDense": "MuiInputAdornment-marginDense",
                              "positionEnd": "MuiInputAdornment-positionEnd",
                              "positionStart": "MuiInputAdornment-positionStart",
                              "root": "MuiInputAdornment-root",
                            }
                          }
                          position="end"
                        >
                          <div
                            className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                          >
                            <WithStyles(ForwardRef(IconButton))
                              aria-label="toggle password visibility"
                              edge="end"
                              onClick={[Function]}
                            >
                              <ForwardRef(IconButton)
                                aria-label="toggle password visibility"
                                classes={
                                  Object {
                                    "colorInherit": "MuiIconButton-colorInherit",
                                    "colorPrimary": "MuiIconButton-colorPrimary",
                                    "colorSecondary": "MuiIconButton-colorSecondary",
                                    "disabled": "Mui-disabled",
                                    "edgeEnd": "MuiIconButton-edgeEnd",
                                    "edgeStart": "MuiIconButton-edgeStart",
                                    "label": "MuiIconButton-label",
                                    "root": "MuiIconButton-root",
                                    "sizeSmall": "MuiIconButton-sizeSmall",
                                  }
                                }
                                edge="end"
                                onClick={[Function]}
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  aria-label="toggle password visibility"
                                  centerRipple={true}
                                  className="MuiIconButton-root MuiIconButton-edgeEnd"
                                  disabled={false}
                                  focusRipple={true}
                                  onClick={[Function]}
                                >
                                  <ForwardRef(ButtonBase)
                                    aria-label="toggle password visibility"
                                    centerRipple={true}
                                    className="MuiIconButton-root MuiIconButton-edgeEnd"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                  >
                                    <button
                                      aria-label="toggle password visibility"
                                      className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="MuiIconButton-label"
                                      >
                                        <ForwardRef(VisibilityOffIcon)>
                                          <WithStyles(ForwardRef(SvgIcon))>
                                            <ForwardRef(SvgIcon)
                                              classes={
                                                Object {
                                                  "colorAction": "MuiSvgIcon-colorAction",
                                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                  "colorError": "MuiSvgIcon-colorError",
                                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                  "root": "MuiSvgIcon-root",
                                                }
                                              }
                                            >
                                              <svg
                                                aria-hidden={true}
                                                className="MuiSvgIcon-root"
                                                focusable="false"
                                                viewBox="0 0 24 24"
                                              >
                                                <path
                                                  d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
                                                />
                                              </svg>
                                            </ForwardRef(SvgIcon)>
                                          </WithStyles(ForwardRef(SvgIcon))>
                                        </ForwardRef(VisibilityOffIcon)>
                                      </span>
                                      <WithStyles(memo)
                                        center={true}
                                      >
                                        <ForwardRef(TouchRipple)
                                          center={true}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child",
                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                              "ripple": "MuiTouchRipple-ripple",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                              "root": "MuiTouchRipple-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="MuiTouchRipple-root"
                                          >
                                            <TransitionGroup
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef(TouchRipple)>
                                      </WithStyles(memo)>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(IconButton)>
                            </WithStyles(ForwardRef(IconButton))>
                          </div>
                        </ForwardRef(InputAdornment)>
                      </WithStyles(ForwardRef(InputAdornment))>
                      <WithStyles(ForwardRef(NotchedOutline))
                        className="MuiOutlinedInput-notchedOutline"
                        labelWidth={70}
                        notched={false}
                      >
                        <ForwardRef(NotchedOutline)
                          className="MuiOutlinedInput-notchedOutline"
                          classes={
                            Object {
                              "legend": "PrivateNotchedOutline-legend-8",
                              "legendLabelled": "PrivateNotchedOutline-legendLabelled-9",
                              "legendNotched": "PrivateNotchedOutline-legendNotched-10",
                              "root": "PrivateNotchedOutline-root-7",
                            }
                          }
                          labelWidth={70}
                          notched={false}
                        >
                          <fieldset
                            aria-hidden={true}
                            className="PrivateNotchedOutline-root-7 MuiOutlinedInput-notchedOutline"
                            style={
                              Object {
                                "paddingLeft": 8,
                              }
                            }
                          >
                            <legend
                              className="PrivateNotchedOutline-legend-8"
                              style={
                                Object {
                                  "width": 0.01,
                                }
                              }
                            >
                              <span
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "&#8203;",
                                  }
                                }
                              />
                            </legend>
                          </fieldset>
                        </ForwardRef(NotchedOutline)>
                      </WithStyles(ForwardRef(NotchedOutline))>
                    </div>
                  </ForwardRef(InputBase)>
                </WithStyles(ForwardRef(InputBase))>
              </ForwardRef(OutlinedInput)>
            </WithStyles(ForwardRef(OutlinedInput))>
          </div>
        </ForwardRef(FormControl)>
      </WithStyles(ForwardRef(FormControl))>
      <WithStyles(ForwardRef(Button))
        className="makeStyles-submit-3"
        color="primary"
        data-cy="login"
        size="large"
        type="submit"
        variant="contained"
      >
        <ForwardRef(Button)
          className="makeStyles-submit-3"
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          color="primary"
          data-cy="login"
          size="large"
          type="submit"
          variant="contained"
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-contained makeStyles-submit-3 MuiButton-containedPrimary MuiButton-containedSizeLarge MuiButton-sizeLarge"
            component="button"
            data-cy="login"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            type="submit"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-contained makeStyles-submit-3 MuiButton-containedPrimary MuiButton-containedSizeLarge MuiButton-sizeLarge"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              data-cy="login"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              type="submit"
            >
              <button
                className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-submit-3 MuiButton-containedPrimary MuiButton-containedSizeLarge MuiButton-sizeLarge"
                data-cy="login"
                disabled={false}
                onBlur={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                type="submit"
              >
                <span
                  className="MuiButton-label"
                >
                  Увійти
                </span>
                <WithStyles(memo)
                  center={false}
                >
                  <ForwardRef(TouchRipple)
                    center={false}
                    classes={
                      Object {
                        "child": "MuiTouchRipple-child",
                        "childLeaving": "MuiTouchRipple-childLeaving",
                        "childPulsate": "MuiTouchRipple-childPulsate",
                        "ripple": "MuiTouchRipple-ripple",
                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                        "root": "MuiTouchRipple-root",
                      }
                    }
                  >
                    <span
                      className="MuiTouchRipple-root"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component={null}
                        exit={true}
                      />
                    </span>
                  </ForwardRef(TouchRipple)>
                </WithStyles(memo)>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
    </form>
  </div>
</LoginPage>
`;
