// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`save button tests should click 1`] = `
<SaveButton
  color="primary"
  errors={Object {}}
  onClickHandler={[MockFunction]}
  size="small"
  title="Зберегти"
  type="button"
  unblockFunction={[MockFunction]}
  values={Object {}}
>
  <WithStyles(ForwardRef(Button))
    color="primary"
    disabled={false}
    onClick={[Function]}
    size="small"
    type="button"
    unblockFunction={[MockFunction]}
    variant="contained"
  >
    <ForwardRef(Button)
      classes={
        Object {
          "colorInherit": "MuiButton-colorInherit",
          "contained": "MuiButton-contained",
          "containedPrimary": "MuiButton-containedPrimary",
          "containedSecondary": "MuiButton-containedSecondary",
          "containedSizeLarge": "MuiButton-containedSizeLarge",
          "containedSizeSmall": "MuiButton-containedSizeSmall",
          "disableElevation": "MuiButton-disableElevation",
          "disabled": "Mui-disabled",
          "endIcon": "MuiButton-endIcon",
          "focusVisible": "Mui-focusVisible",
          "fullWidth": "MuiButton-fullWidth",
          "iconSizeLarge": "MuiButton-iconSizeLarge",
          "iconSizeMedium": "MuiButton-iconSizeMedium",
          "iconSizeSmall": "MuiButton-iconSizeSmall",
          "label": "MuiButton-label",
          "outlined": "MuiButton-outlined",
          "outlinedPrimary": "MuiButton-outlinedPrimary",
          "outlinedSecondary": "MuiButton-outlinedSecondary",
          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
          "root": "MuiButton-root",
          "sizeLarge": "MuiButton-sizeLarge",
          "sizeSmall": "MuiButton-sizeSmall",
          "startIcon": "MuiButton-startIcon",
          "text": "MuiButton-text",
          "textPrimary": "MuiButton-textPrimary",
          "textSecondary": "MuiButton-textSecondary",
          "textSizeLarge": "MuiButton-textSizeLarge",
          "textSizeSmall": "MuiButton-textSizeSmall",
        }
      }
      color="primary"
      disabled={false}
      onClick={[Function]}
      size="small"
      type="button"
      unblockFunction={[MockFunction]}
      variant="contained"
    >
      <WithStyles(ForwardRef(ButtonBase))
        className="MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall"
        component="button"
        disabled={false}
        focusRipple={true}
        focusVisibleClassName="Mui-focusVisible"
        onClick={[Function]}
        type="button"
        unblockFunction={[MockFunction]}
      >
        <ForwardRef(ButtonBase)
          className="MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall"
          classes={
            Object {
              "disabled": "Mui-disabled",
              "focusVisible": "Mui-focusVisible",
              "root": "MuiButtonBase-root",
            }
          }
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          onClick={[Function]}
          type="button"
          unblockFunction={[MockFunction]}
        >
          <button
            className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary MuiButton-containedSizeSmall MuiButton-sizeSmall"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={0}
            type="button"
            unblockFunction={[MockFunction]}
          >
            <span
              className="MuiButton-label"
            >
              Зберегти
            </span>
            <WithStyles(memo)
              center={false}
            >
              <ForwardRef(TouchRipple)
                center={false}
                classes={
                  Object {
                    "child": "MuiTouchRipple-child",
                    "childLeaving": "MuiTouchRipple-childLeaving",
                    "childPulsate": "MuiTouchRipple-childPulsate",
                    "ripple": "MuiTouchRipple-ripple",
                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                    "root": "MuiTouchRipple-root",
                  }
                }
              >
                <span
                  className="MuiTouchRipple-root"
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    component={null}
                    exit={true}
                  />
                </span>
              </ForwardRef(TouchRipple)>
            </WithStyles(memo)>
          </button>
        </ForwardRef(ButtonBase)>
      </WithStyles(ForwardRef(ButtonBase))>
    </ForwardRef(Button)>
  </WithStyles(ForwardRef(Button))>
</SaveButton>
`;
